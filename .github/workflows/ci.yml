# CI Pipeline - Continuous Integration
# Trigger: push/PR vào dev branch
# Mục đích: Test code, build image, security scan

name: 🔧 Continuous Integration

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

env:
  REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  # Job 1: Test Backend
  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Run unit tests
      working-directory: ./tms-server
      run: ./mvnw clean test -Dspring.profiles.active=test

    - name: Run integration tests with Testcontainers
      working-directory: ./tms-server
      run: ./mvnw verify -Dspring.profiles.active=integration-test -Djacoco.skip=true

    - name: Generate JaCoCo report
      working-directory: ./tms-server
      run: ./mvnw jacoco:report

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./tms-server/target/site/jacoco/jacoco.xml
        flags: backend
        name: backend-coverage
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          tms-server/target/surefire-reports/
          tms-server/target/site/jacoco/

  # Job 2: Test Frontend
  test-frontend:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: tms-client/package-lock.json

    - name: Install dependencies
      working-directory: ./tms-client
      run: npm ci

    - name: Run linting
      working-directory: ./tms-client
      run: npm run lint

    - name: Run tests
      working-directory: ./tms-client
      run: npm run test:ci

    - name: Build application
      working-directory: ./tms-client
      run: npm run build

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: tms-client/dist/

  # Job 3: Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'HIGH,CRITICAL'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 4: Build Docker Images (cho dev branch)
  build-docker:
    name: 🐳 Build Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/tms-server
        tags: |
          type=ref,event=branch
          type=sha,prefix=dev-

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./tms-server
        file: ./tms-server/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/tms-client
        tags: |
          type=ref,event=branch
          type=sha,prefix=dev-

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./tms-client
        file: ./tms-client/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Image scan summary
      run: |
        echo "## 🐳 Docker Images Built" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Tag | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend | ${{ steps.meta-backend.outputs.tags }} | ✅ Success |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ${{ steps.meta-frontend.outputs.tags }} | ✅ Success |" >> $GITHUB_STEP_SUMMARY
